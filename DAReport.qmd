---
title: "Data Analytics Winter Final Project"
author: 
  - Trifanov Matvei
  - Add you full name here
abstract: "Executive Summary. <!--For the final version: Write an executive summary here. Write it when you are mostly finished with the main report. It should summarize the question, with what data and how you answer it, and what the result is.-->"
format:   
  html: 
    toc: true
    toc-depth: 3
    standalone: true
    embed-resources: true
    code-fold: true
    number-sections: true
---

```{r}
#| label: packages-data
#| message: false
#| echo: false
library(tidymodels)
library(tidyverse)
library(patchwork)
library(ggplot2)
library(dplyr)
library(glue)
library(knitr)
library(corrr)
library(naniar)
```

## 1. Introduction
This Homework Project works with dataframes in the package `nycflights13` about flights, specifically a sample of domestic flights that departed from the three major New York City airports in 2013.


The data package `nycflights13` contains five tabular data frames. In total there is information about\
`r nrow(airlines)` **airlines**,\
`r nrow(airports)` **airports**,\
`r nrow(flights)` **flights**,\
`r nrow(planes)` **planes**,\
and `r nrow(weather)` **weather** observations.

The core dataframe `flights` has the following variables:

`year`, `month`, `day`: Date of departure.\
`dep_time`, `arr_time`: Actual departure and arrival times (format HHMM or HMM), local time zone.\
`sched_dep_time`, `sched_arr_time`: Scheduled departure and arrival times (format HHMM or HMM), local time zone.\
`dep_delay`, `arr_delay`: Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.\
`carrier`: Two letter carrier abbreviation. See `airlines` dataframe to get the full name.\
`flight`: Flight number.\
`tailnum`: Plane tail number. See `planes` for additional metadata.\
`origin`, `dest`: Origin and destination. See `airports` for additional metadata.\
`air_time`: Amount of time spent in the air, in minutes.\
`distance`: Distance between airports, in miles.\
`hour`, `minute`: Time of scheduled departure broken into hour and minutes.\
`time_hour`: Scheduled date and hour of the flight as a *POSIXct* date. Along with *origin*, can be used to join flights data to `weather` data.

# 2. Data Load

Load the datasets and libraries.
Provide a brief explanation of each dataset.
Code for loading and viewing the data.

```{r}
#| label: data_load
airlines = read.csv("Data/airlines.csv", sep = ";", header = TRUE)
airports = read.csv("Data/airports.csv", sep = ";", header = TRUE)
flights = read.csv("Data/flights.csv", sep = ";", header = TRUE)
planes = read.csv("Data/planes.csv", sep = ";", header = TRUE)
weather = read.csv("Data/weather.csv", sep = ";", header = TRUE)

# structure of flights dataset
str(flights)

# data summary
summary(planes)
```

## 3. Data Cleaning

Inspect for missing values, duplicates, and inconsistencies.
Clean and handle missing data (impute or remove).
Deal with duplicates and ensure the data is tidy.
Describe each step and your decisions.

```{r}
#| label: data_cleaning
#Flights data set. Inspecting and cleaning
#Exploring missing values 
missing_count_flights <- colSums(is.na(flights))
print(missing_count_flights)

#visualizing the missing data patterns
gg_miss_upset(flights) # missing data upset plot


#checking patterns for missing data values
missing_dep_arr<- flights %>% 
  filter(is.na(dep_time)| is.na(arr_time))

print("Subset of Rows with missing dep_time: ")
print(head(missing_dep_arr))

#Checking correlation of missing values
flights %>% 
  mutate(missing_dep_time = is.na(dep_time),
         missing_arr_time = is.na(arr_time),
         missing_dep_delay = is.na(dep_delay),
         missing_arr_delay = is.na(arr_delay)) %>%
  group_by(missing_dep_time) %>%
  summarise(
    dep_delay_missing = sum(missing_dep_delay),
    arr_delay_missing = sum(missing_arr_delay),
    count = n()
    )

#exploring rows missing critical information
#focusing on rows where "dep_time" or "arr_time" are NA
flights_missing_critical<- flights %>% 
  filter(is.na(dep_time)|is.na(arr_time))

print(paste("Number of Rows Missing dep_time or arr_time: ", nrow(flights_missing_critical)))

# Calculate the proportion of rows with missing critical columns
total_rows <- nrow(flights)
missing_critical_rows <- nrow(flights_missing_critical)
proportion_missing <- (missing_critical_rows / total_rows) * 100

print(paste("Percentage of Rows with Missing Critical Data: ", round(proportion_missing, 2), "%"))


#Removing rows with missing values
flights_cleaned_removed <- flights %>% 
  filter(!is.na(dep_time) & !is.na(arr_time))

#checking the removal 
cat("Rows before removal: ", nrow(flights), "\n")
cat("Rows after removal: ", nrow(flights_cleaned_removed), "\n")

#checking the missing count after removal
missing_count_removed <- colSums(is.na(flights_cleaned_removed))
print(missing_count_removed)

# Imputing missing dep_time and arr_time with the median value
flights_cleaned_imputed <- flights %>%
  mutate(
    dep_time = ifelse(is.na(dep_time), median(dep_time, na.rm = TRUE), dep_time),
    arr_time = ifelse(is.na(arr_time), median(arr_time, na.rm = TRUE), arr_time)
  )

# Checking the missing count after imputation
missing_count_imputed <- colSums(is.na(flights_cleaned_imputed))
print(missing_count_imputed)


# Visualizing the distribution of delays before and after imputation
ggplot(flights_cleaned_removed, aes(x = dep_delay)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Departure Delay Distribution (After Removal)", x = "Departure Delay", y = "Count")

ggplot(flights_cleaned_imputed, aes(x = dep_delay)) +
  geom_histogram(binwidth = 10, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "Departure Delay Distribution (After Imputation)", x = "Departure Delay", y = "Count")

# Imputing missing arr_delay and air_time with the median of each column
flights_cleaned_imputed <- flights_cleaned_imputed %>%
  mutate(
    arr_delay = ifelse(is.na(arr_delay), median(arr_delay, na.rm = TRUE), arr_delay),
    air_time = ifelse(is.na(air_time), median(air_time, na.rm = TRUE), air_time)
  )

# Checking the missing count after imputing arr_delay and air_time
missing_count_imputed_after <- colSums(is.na(flights_cleaned_imputed))
print(missing_count_imputed_after)

# Visualizing the distribution of arr_delay after imputation
ggplot(flights_cleaned_imputed, aes(x = arr_delay)) +
  geom_histogram(binwidth = 10, fill = "lightblue", color = "black", alpha = 0.7) +
  labs(title = "Arrival Delay Distribution (After Imputation)", x = "Arrival Delay", y = "Count")

# Visualizing the distribution of air_time after imputation
ggplot(flights_cleaned_imputed, aes(x = air_time)) +
  geom_histogram(binwidth = 10, fill = "lightcoral", color = "black", alpha = 0.7) +
  labs(title = "Air Time Distribution (After Imputation)", x = "Air Time", y = "Count")

flights_cleaned_removed_tailnum <- flights_cleaned_imputed %>%
  filter(!is.na(tailnum))

cat("Rows before removal: ", nrow(flights_cleaned_imputed), "\n")
cat("Rows after removal: ", nrow(flights_cleaned_removed_tailnum), "\n")

#dealing with the missing values in dep_delay
missing_dep_delay <- flights_cleaned_removed_tailnum %>%
  filter(is.na(dep_delay))

# Examine if the missing dep_delay values are associated with missing dep_time
missing_dep_delay %>%
  summarise(
    missing_dep_time = sum(is.na(dep_time)),
    total_missing = n()
  )
flights_cleaned_removed_depdelay <- flights_cleaned_removed_tailnum %>%
  filter(!is.na(dep_delay))

cat("Rows before removal: ", nrow(flights_cleaned_removed_tailnum), "\n")
cat("Rows after removal: ", nrow(flights_cleaned_removed_depdelay), "\n")


# Before imputation or removal
ggplot(flights_cleaned_removed_tailnum, aes(x = dep_delay)) +
  geom_histogram(binwidth = 10, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Departure Delay Distribution (Before)", x = "Departure Delay", y = "Count")

# After imputation or removal
ggplot(flights_cleaned_removed_depdelay, aes(x = dep_delay)) +
  geom_histogram(binwidth = 10, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "Departure Delay Distribution (After)", x = "Departure Delay", y = "Count")


```

## 4. Exploratory Data Analysis 

Visualize and summarize each dataset.
Identify patterns, relationships, and trends.
Use visualizations (e.g., histograms, scatterplots, bar charts).
Describe insights from the data exploration. 

```{r}
#| label: EDA


```

## 5. Data Preprocessing

Encode categorical variables (if applicable).
Scale/normalize numerical features.
Merge datasets if needed (e.g., join flights with weather data).
Feature engineering (derive new variables if useful).

```{r}
#| label: preprocessing

```

## 6. Supervised Learning


6.1 Regression Task

Choose a continuous target variable (e.g., flight delay time).
Apply regression models (e.g., linear regression).
Evaluate performance (RMSE, RÂ², etc.).
6.2 Classification Task

Select or derive a categorical target variable (e.g., "on-time" vs "delayed").
Apply classification models (e.g., logistic regression, decision trees).
Evaluate performance (accuracy, precision, recall, etc.).

```{r}
#| label: modeling



```

## Insights and Discussion

Compare model performance.
Highlight key findings and insights.
Discuss any limitations in the analysis.



